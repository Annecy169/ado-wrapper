[tool.poetry]
name = "ado-api"
description = "A high level wrapper around the ADO API"
authors = ["Ben Skerritt"]
version = "0.1.0"
license = "Proprietary"
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
requests = "2.31.0"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
pylint = "^2.17.5"
pytest = "^7.4.0"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ['.venv', '.vscode', '.pytest_cache', '.mypy_cache', '.git', '__pycache__']
strict = false

[tool.pylint.main]
ignore = [".venv"]
recursive = true

[tool.pylint.messages_control]
max-line-length = 140
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-timeout",

    "too-few-public-methods",
    "too-many-instance-attributes",

    "arguments-renamed",
    "invalid-name",
    "line-too-long",
    "fixme",
    "broad-exception-caught",
    "import-outside-toplevel",
    "attribute-defined-outside-init",
    "cyclic-import",
    "redefined-outer-name",
]

[tool.pytest.ini_options]
log_cli = true
markers = [
    "wip: mark test as a work in progress",
    "from_request_payload: mark test which convert payloads to resources",
    "update: Tests which are used to update the API",
    "create_delete: Tests which are used to create and delete resources",
    "get_by_id: Tests which are used to get resources by their ID",
    "get_all: Tests which are used to get all resources",
]

[tool.black]
line_length = 140

[tool.isort]
profile = "black"
